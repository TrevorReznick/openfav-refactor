import React, { useState } from 'react';
import { sites, lists, collections } from '@/api/apiClient';

// Funzione per ottenere tutte le funzioni da un oggetto API
const getApiFunctions = (apiObject, apiName) => {
    return Object.keys(apiObject)
        .filter(key => typeof apiObject[key] === 'function')
        .map(funcName => ({
            name: funcName,
            fullName: `${apiName}.${funcName}`,
            func: apiObject[funcName],
            apiName
        }));
};

// Tutte le API disponibili
const allApis = {
    sites,
    lists,
    collections
};

// Raccogliamo tutte le funzioni CRUD
const allFunctions = Object.entries(allApis).flatMap(([apiName, apiObject]) =>
    getApiFunctions(apiObject, apiName)
);

// Dati di test per le operazioni
const getTestData = (apiName, funcName) => {
    const testData = {
        sites: {
            create: {
                title: 'Test Site',
                url: 'https://my_example.com', 
                description: 'Test site created via API',
                user_id: '9446217e-49e8-49f9-84dc-822ed8df969b',
                accessible: true,
                domain_exists: true,
                html_content_exists: false,
                is_public: true,
                secure: true,
                status_code: 200,
                type: 'example_type',
                valid_url: true,
                AI: false,
                id_area: 1,
                id_cat: 1,
                tag_3: 3,
                tag_4: 4,
                tag_5: 5,
                id_provider: 1,
                ratings: 4,
                AI_think: 'AI analysis',
                AI_summary: 'Summary generated by AI',
            },
            update: { title: 'Updated Site', description: 'Updated' },
            getByUserId: { userId: '9446217e-49e8-49f9-84dc-822ed8df969b' },
            getOne: { id: '140' },
            delete: { id: '139' }
        },
        lists: {
            create: { name: 'Test List', description: 'Test', userId: 'user123', isPublic: true },
            update: { name: 'Updated List', description: 'Updated' },
            getListsByUserId: { userId: 'user123' },
            getOne: { id: 1 },
            delete: { id: 1 }
        },
        collections: {
            create: { name: 'Test Collection', description: 'Test', userId: 'user123' },
            update: { name: 'Updated Collection', description: 'Updated' },
            getOne: { id: '1' },
            delete: { id: '1' }
        }
    };

    return testData[apiName]?.[funcName] || {};
};

// Funzione per testare singola API
const testFunction = async (apiFunc) => {
    const { name, fullName, func, apiName } = apiFunc;

    console.group(`🚀 Testing ${fullName}`);
    console.time(`⏱️ ${fullName} execution time`);

    try {
        let result;
        const testData = getTestData(apiName, name);

        if (name === 'getAll') {
            result = await func();
        } else if (name.includes('ByUserId')) {
            result = await func(testData.userId);
        } else if (name === 'getOne') {
            result = await func(testData.id);
        } else if (name === 'create') {
            result = await func(testData);
        } else if (name === 'update') {
            result = await func(testData.id, testData);
        } else if (name === 'delete') {
            result = await func(testData.id);
        }

        console.log('✅ Success:', result);
        console.timeEnd(`⏱️ ${fullName} execution time`);
    } catch (error) {
        console.error('❌ Error:', error.message);
        console.timeEnd(`⏱️ ${fullName} execution time`);
    }

    console.groupEnd();
};

// Testa tutte le funzioni
const testAllForApi = async (apiName, setResults) => {
    console.group(`🔥 Testing all ${apiName} functions`);

    const apiFunctions = allFunctions.filter(f => f.apiName === apiName);

    for (const apiFunc of apiFunctions) {
        await testFunction(apiFunc);
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.groupEnd();
    setResults(prev => ({ ...prev, [apiName]: 'completed' }));
};

// Componente minimale
const ApiTesterMinimal = () => {
    const [status, setStatus] = useState('');

    const handleRunTests = async () => {
        setStatus('running');
        console.log('🚀 Starting API tests...');
        await testAllForApi('sites', setStatus);
        await testAllForApi('lists', setStatus);
        await testAllForApi('collections', setStatus);
        setStatus('done');
    };

    return (
        <div style={{ padding: '2rem', textAlign: 'center' }}>
            <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
                🚀 API Tester Minimale
            </h1>
            <p style={{ marginBottom: '1rem' }}>
                Clicca il bottone per eseguire tutti i test sulle API.
            </p>
            <button
                onClick={handleRunTests}
                disabled={status === 'running'}
                style={{
                    padding: '0.75rem 1.5rem',
                    backgroundColor: status === 'running' ? '#ccc' : '#3b82f6',
                    color: 'white',
                    border: 'none',
                    borderRadius: '0.375rem',
                    cursor: status === 'running' ? 'not-allowed' : 'pointer'
                }}
            >
                {status === 'running' ? '⏳ In esecuzione...' : '▶️ Avvia test'}
            </button>

            {status === 'done' && (
                <p style={{ marginTop: '1rem', color: 'green' }}>✅ Tutti i test completati!</p>
            )}
        </div>
    );
};

export default ApiTesterMinimal;