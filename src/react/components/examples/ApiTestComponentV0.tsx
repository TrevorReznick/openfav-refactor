import React, { useState, useEffect } from 'react';
import { sites, lists, collections } from '@/api/apiClient';

const ApiTester = () => {
  const [results, setResults] = useState({});
  const [loading, setLoading] = useState({});
  
  // Funzione per ottenere automaticamente tutte le funzioni da un oggetto API
  const getApiFunctions = (apiObject, apiName) => {
    return Object.keys(apiObject)
      .filter(key => typeof apiObject[key] === 'function')
      .map(funcName => ({
        name: funcName,
        fullName: `${apiName}.${funcName}`,
        func: apiObject[funcName],
        apiName
      }));
  };

  // Raccolta automatica di tutte le API e le loro funzioni
  const allApis = {
    sites,
    lists,
    collections
  };

  const allFunctions = Object.entries(allApis).flatMap(([apiName, apiObject]) => 
    getApiFunctions(apiObject, apiName)
  );

  // Dati di test per le diverse operazioni
  const getTestData = (apiName, funcName) => {
    const testData = {
      sites: {
            create: {
                title: 'Test Site',
                url: 'https://my_example.com', 
                description: 'Test site created via API',
                user_id: '9446217e-49e8-49f9-84dc-822ed8df969b',
                accessible: true,
                domain_exists: true,
                html_content_exists: false,
                is_public: true,
                secure: true,
                status_code: 200,
                type: 'example_type',
                valid_url: true,
                AI: false,
                id_area: 1,
                id_cat: 1,
                tag_3: 3,
                tag_4: 4,
                tag_5: 5,
                id_provider: 1,
                ratings: 4,
                AI_think: 'AI analysis',
                AI_summary: 'Summary generated by AI',
            },
        update: { title: 'Updated Site', description: 'Updated' },
        getByUserId: { userId: '9446217e-49e8-49f9-84dc-822ed8df969b' },
        getOne: { id: '140' },
        delete: { id: '139' }
      },
      lists: {
        create: { name: 'Test List', description: 'Test', userId: 'user123', isPublic: true },
        update: { name: 'Updated List', description: 'Updated' },
        getListsByUserId: { userId: 'user123' },
        getOne: { id: 1 },
        delete: { id: 1 }
      },
      collections: {
        create: { name: 'Test Collection', description: 'Test', userId: 'user123' },
        update: { name: 'Updated Collection', description: 'Updated' },
        getOne: { id: '1' },
        delete: { id: '1' }
      }
    };

    return testData[apiName]?.[funcName] || {};
  };

  // Funzione per testare automaticamente una funzione API
  const testFunction = async (apiFunc) => {
    const { name, fullName, func, apiName } = apiFunc;
    
    setLoading(prev => ({ ...prev, [fullName]: true }));
    
    console.group(`üöÄ Testing ${fullName}`);
    console.time(`‚è±Ô∏è ${fullName} execution time`);
    
    try {
      let result;
      const testData = getTestData(apiName, name);
      
      // Determina i parametri in base al nome della funzione
      if (name === 'getAll') {
        console.log('üì§ Calling with no parameters');
        result = await func();
      } else if (name.includes('ByUserId')) {
        console.log('üì§ Calling with userId:', testData.userId);
        result = await func(testData.userId || 'user123');
      } else if (name === 'getOne') {
        console.log('üì§ Calling with id:', testData.id);
        result = await func(testData.id);
      } else if (name === 'create') {
        console.log('üì§ Calling with data:', testData);
        result = await func(testData);
      } else if (name === 'update') {
        console.log('üì§ Calling with id and data:', testData.id || '1', testData);
        result = await func(testData.id || '1', testData);
      } else if (name === 'delete') {
        console.log('üì§ Calling with id:', testData.id);
        result = await func(testData.id);
      } else {
        console.log('üì§ Calling with default test data:', testData);
        result = await func(testData);
      }
      
      console.log('‚úÖ Success:', result);
      console.timeEnd(`‚è±Ô∏è ${fullName} execution time`);
      
      setResults(prev => ({
        ...prev,
        [fullName]: { success: true, result, timestamp: new Date().toISOString() }
      }));
      
    } catch (error) {
      console.error('‚ùå Error:', error.message);
      console.timeEnd(`‚è±Ô∏è ${fullName} execution time`);
      
      setResults(prev => ({
        ...prev,
        [fullName]: { success: false, error: error.message, timestamp: new Date().toISOString() }
      }));
    }
    
    console.groupEnd();
    setLoading(prev => ({ ...prev, [fullName]: false }));
  };

  // Funzione per testare tutte le funzioni di un'API
  const testAllForApi = async (apiName) => {
    console.group(`üî• Testing all ${apiName} functions`);
    
    const apiFunctions = allFunctions.filter(f => f.apiName === apiName);
    
    for (const apiFunc of apiFunctions) {
      await testFunction(apiFunc);
      // Piccola pausa tra le chiamate per evitare sovraccarico
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.groupEnd();
  };

  // Funzione per testare TUTTO
  const testEverything = async () => {
    console.group('üöÄüöÄüöÄ TESTING ALL APIs üöÄüöÄüöÄ');
    
    for (const apiName of Object.keys(allApis)) {
      await testAllForApi(apiName);
    }
    
    console.groupEnd();
    console.log('üéâ All tests completed!');
  };

  // Auto-test all'avvio (opzionale)
  useEffect(() => {
    console.log('üìã Available API functions:', allFunctions.map(f => f.fullName));
    
    // Aggiungi funzioni helper al window per testing manuale
    window.testApi = {
      testFunction: (apiName, funcName) => {
        const func = allFunctions.find(f => f.apiName === apiName && f.name === funcName);
        if (func) testFunction(func);
        else console.error(`Function ${apiName}.${funcName} not found`);
      },
      testAll: testEverything,
      testApiSet: testAllForApi,
      listFunctions: () => console.table(allFunctions.map(f => ({ 
        API: f.apiName, 
        Function: f.name, 
        FullName: f.fullName 
      })))
    };
    
    console.log(`
üîß Helper functions available in console:
- window.testApi.listFunctions() - Lista tutte le funzioni
- window.testApi.testFunction('sites', 'getAll') - Testa singola funzione  
- window.testApi.testApiSet('sites') - Testa tutte le funzioni di un'API
- window.testApi.testAll() - Testa tutto
    `);
  }, []);

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">API Console Tester</h1>
      
      <div className="bg-gray-100 p-4 rounded-lg mb-6">
        <h2 className="font-semibold mb-2">Console Commands Available:</h2>
        <div className="font-mono text-sm space-y-1">
          <div>‚Ä¢ <code>window.testApi.listFunctions()</code> - Lista tutte le funzioni</div>
          <div>‚Ä¢ <code>window.testApi.testFunction('sites', 'getAll')</code> - Testa singola funzione</div>
          <div>‚Ä¢ <code>window.testApi.testApiSet('sites')</code> - Testa tutte le funzioni di un'API</div>
          <div>‚Ä¢ <code>window.testApi.testAll()</code> - Testa tutto</div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {Object.keys(allApis).map(apiName => (
          <div key={apiName} className="bg-white p-4 rounded-lg shadow">
            <h3 className="font-semibold mb-2 capitalize">{apiName} API</h3>
            <div className="space-y-2">
              {allFunctions
                .filter(f => f.apiName === apiName)
                .map(func => (
                  <button
                    key={func.fullName}
                    onClick={() => testFunction(func)}
                    disabled={loading[func.fullName]}
                    className="w-full px-3 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
                  >
                    {loading[func.fullName] ? '‚è≥' : '‚ñ∂Ô∏è'} {func.name}
                  </button>
                ))}
              <button
                onClick={() => testAllForApi(apiName)}
                className="w-full px-3 py-2 text-sm bg-green-500 text-white rounded hover:bg-green-600 mt-2"
              >
                üöÄ Test All {apiName}
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className="text-center">
        <button
          onClick={testEverything}
          className="px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 font-semibold"
        >
          üî• TEST EVERYTHING üî•
        </button>
      </div>

      <div className="mt-6 bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm">
        <div className="mb-2">üìä Results Summary:</div>
        {Object.keys(results).length === 0 ? (
          <div>No tests run yet. Check browser console for detailed logs.</div>
        ) : (
          Object.entries(results).map(([name, result]) => (
            <div key={name} className="flex justify-between">
              <span>{name}</span>
              <span className={result.success ? 'text-green-400' : 'text-red-400'}>
                {result.success ? '‚úÖ' : '‚ùå'}
              </span>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ApiTester;